/*=========================================================================

  Program:   Visualization Toolkit
  Module:    vtkMyElevationFilter.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
// .NAME vtkMyElevationFilter - generate scalars along a specified direction
// .SECTION Description
// vtkMyElevationFilter is a filter to generate scalar values from a
// dataset.  The scalar values lie within a user specified range, and
// are generated by computing a projection of each dataset point onto
// a line. The line can be oriented arbitrarily. A typical example is
// to generate scalars based on elevation or height above a plane.

#ifndef __vtkMyImageData_h
#define __vtkMyImageData_h

#include "vtkImageAlgorithm.h"
#include <vector>
#include <sstream>
#include <iostream>
#include <fstream>
class vtkDoubleArray;
class vtkMutexLock;

/**
 * The paraview plugin is a query dispathcer. It can issue queries to the parallel applications
 * which implement the query interface
 */
class VTK_GRAPHICS_EXPORT vtkMyImageData  : public vtkImageAlgorithm
{
	
public:
  vtkTypeMacro(vtkMyImageData, vtkImageAlgorithm);
  static vtkMyImageData* New();
  
  void PrintSelf(ostream& os, vtkIndent indent);
  

  vtkSetVector3Macro(Dimensions,int);
  vtkGetVectorMacro(Dimensions,int,3);

  vtkSetVector3Macro(BoundingBox,double);
  vtkGetVectorMacro(BoundingBox,double,3);
  
  vtkSetVector3Macro(Offset,double);
  vtkGetVectorMacro(Offset,double,3);
  
  double _data [33*33*1];
protected:
  vtkMyImageData();
  ~vtkMyImageData();
  int Dimensions[3];
  double BoundingBox[3];
  double Offset[3];

  virtual int RequestInformation(vtkInformation *, vtkInformationVector **, vtkInformationVector *);
  virtual int RequestData(vtkInformation *, vtkInformationVector **, vtkInformationVector *);
private:
  vtkMyImageData(const vtkMyImageData&);  // Not implemented.
  void operator=(const vtkMyImageData&);  // Not implemented.
};

#endif
