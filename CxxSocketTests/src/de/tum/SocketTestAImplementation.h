#ifndef DE_TUM_SOCKETTESTAIMPLEMENTATION_H_
#define DE_TUM_SOCKETTESTAIMPLEMENTATION_H_ 

//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
#include "mpi.h"
#include "de/tum/SocketTestAAbstractImplementation.h"
#include <string>
#include <pthread.h>
#include <fstream>
#include <chrono>

namespace de { 
namespace tum { 

class SocketTestAImplementation;
} 
}

class de::tum::SocketTestAImplementation : public de::tum::SocketTestAAbstractImplementation{
private:
	 const static double global_offset;
	 const static double global_size;
	 const static int global_dimension;
	 pthread_mutex_t _lock;
	 pthread_mutex_t _lock2;
         double _offset[3];
	 double _size[3];
	 int _dimensions[3];
	 double *_data;
	 double *_distances;
	 int *_timesteps;
	 std::chrono::high_resolution_clock::time_point _start;
	 std::ofstream _log_file;
         int _iter;
public:
	SocketTestAImplementation();
	~SocketTestAImplementation();
	void getNumberOfParts(int& parts);
	void getQueryDescription(double* offset, const int offset_len,double* size, const int size_len,int* resolution, const int resolution_len,int* mids, const int mids_len);
	void forwardAnswer(
			const double* data,
			const int data_len,
			const double* distance,
			const int distance_len,
			const int* indices,
			const int indices_len,
			const int mid);
    double* getOffset();
	double* getSize();
	void cloneData(double* targetData);
	int* getDimensions();
        void initialiseParallel(int hor, int ver);
	void constructorToString();
};     


#endif
