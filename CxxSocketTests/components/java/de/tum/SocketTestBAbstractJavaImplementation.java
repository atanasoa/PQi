//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package de.tum;


public abstract class SocketTestBAbstractJavaImplementation extends SocketComponent implements SocketTestB{
  protected de.tum.ascodt.plugin.ui.tabs.SocketClientAppsTab _appTab;
  protected String   _instanceName;
  protected String _projectLocation;
  public SocketTestBAbstractJavaImplementation( String instanceName ) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    _instanceName = instanceName;
    _appTab = new de.tum.ascodt.plugin.ui.tabs.SocketClientAppsTab("SocketTestB",this, de.tum.ascodt.plugin.ui.views.AppsViewContainer.ID);
    _appTab.setVisible(true);
    _appTab.addListener(this);
    
    
  }
  
  public de.tum.ascodt.repository.Target getTarget() {
     return de.tum.ascodt.repository.Target.createReverseCxxRemoteSocketTarget();
  }
  
  public de.tum.ascodt.repository.TargetParameters getTargetParameters(){
     return de.tum.ascodt.repository.TargetParameters.createRemoteSocketParameters(
          _appTab.getHost(),
          _appTab.getPort()
          );
  }

  public long getReference(){
    return 0;
  }  
  
  public void setReference(long ref){
   
  }
  
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void lock() {
    
  }

  public void setProjectLocation(String location){
     _projectLocation = location;
     _appTab.setProjectLocation(location);
     if(_appTab.hasApplicationSettings())
          _appTab.execute();
  }
 
  /**
   * @see de.tum.ascodt.repository.entities
   */
  public void unlock() {
    
  }
  
 
  public void destroy()  {
          try{
               if(isConnected())
                    sendIntData(1);
          }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
               de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().showError(getClass().getName(), "destroy()", e);
          }
          super.close();
          _appTab.removeListener(this);
          _appTab.setVisible(false);
          _appTab.dispose();
    
  }
  
  public boolean isValid() {
     return true;
  }


  public boolean hasGUI() {
    // @todo Insert your code here
    return false;
  }
  
  
  public void openGUI() {
    // @todo Insert your code here
  }
  
  
  public void closeGUI() {
    // @todo Insert your code here
  }
  
  @Override
  public String getInstanceName() {
    return _instanceName;
  }

  @Override
  public void setInstanceName(String instanceName) {
    _instanceName=instanceName;
  }
  
  public void createInstance(){
     
  }
 
  public void destroyInstance(){
  }
 
  

  public void sim() {
    //__SWITCH_SYNC_ASYNC__
    try{
         int methodId=11;
         sendIntData(methodId);
         
           
    }catch(de.tum.ascodt.utils.exceptions.ASCoDTException e){
       de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().showError( getClass().getName() , "sim()", e);
    }  
  }
  

  /**
   * Uses port
   */
  protected de.tum.QuerySocketDispatcher _queryServer = null;
  
  
 
  
  
  /**
   * @see Case class 
   */
  public de.tum.Query createPortForqueryServer(
     de.tum.ascodt.repository.Target target,
     de.tum.ascodt.repository.TargetParameters targetParameters
  ) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    
    de.tum.QuerySocketPort result = null;
    if (
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaLocal||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.JavaNative
    ) {
      result = new de.tum.QuerySocket2JavaPlainPort();
     
    }else if(
      target.getType()==de.tum.ascodt.repository.Target.TargetType.ReverseFortranRemoteSocket||
      target.getType()==de.tum.ascodt.repository.Target.TargetType.ReverseCxxRemoteSocket
    ){
          result = new de.tum.QuerySocket2SocketPlainPort(
               targetParameters.getStringParameter("host"),
               targetParameters.getIntParameter("port")
          );
    }
    assert(result!=null);
    _appTab.addListener(result);
    long port_ref=createClientPortForqueryServer(result);
    result.setReference(port_ref); 
    
    
    
    
    
    return result;
  }
  
  

   long createClientPortForqueryServer(de.tum.QuerySocketPort socketPort) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=2;
     long ref=-1;
     sendIntData(method);
     sendStringData(socketPort.getHost());
     sendIntData(socketPort.getPort());
     socketPort.open();
     ref=readLongData();
     return ref;
  }
  
  /**
   * @see Case class 
   */
  public void connectqueryServer(final de.tum.Query  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    //assert(_isLocked);
    assert(port!=null);
     if(_queryServer==null){
       
        _queryServer = new de.tum.QuerySocketDispatcher();
        _appTab.addListener(_queryServer);
        long dispRef = connectClientDispatcherqueryServer(_queryServer.getHost(),_queryServer.getPort());
        _queryServer.setReference(dispRef);
     }
     _queryServer.connect(port);
              
   
   
  }
  
  public long  connectClientDispatcherqueryServer(String host,int port) throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int method=3;
     long ref=-1;
     sendIntData(method);
     sendStringData(host);
     sendIntData(port);
     _queryServer.open();
     ref=readLongData();
     
     return ref;
  }
  
  
  
  /**
   * @see Case class 
   */
  public void disconnectqueryServer(final de.tum.Query  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    assert(port!=null);
    if(_queryServer!=null&&_queryServer.isConnected()){
               assert(_queryServer!=null );
               _appTab.removeListener(( de.tum.QuerySocketPort)port);
               _queryServer.disconnect(port);
               if(!_queryServer.isConnected()){
                 _appTab.removeListener(_queryServer);
                 disconnectDispatcherqueryServer();
                 _queryServer.close();
                 _queryServer = null;
               }
    }
  }
  
  public void disconnectDispatcherqueryServer() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=4;
     sendIntData(methodId);
     
  }
  
  


}
 


