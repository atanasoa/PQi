//
// ASCoDT - Advanced Scientific Computing Development Toolkit
//
// This file was generated by ASCoDT's simplified SIDL compiler.
//
// Authors: Tobias Weinzierl, Atanas Atanasov   
//
package de.tum;


public class QuerySocket2JavaPlainPort extends QueryAbstractSocketPort 
     implements java.lang.Runnable,java.nio.channels.CompletionHandler< java.nio.channels.AsynchronousSocketChannel, Object>{

  interface QuerySocketInvoker {
    void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException;
  } 
  private long _ref;
  private QuerySocketInvoker[] _invokers;
  private java.util.concurrent.ExecutorService _executor;
  public QuerySocket2JavaPlainPort(String host,int port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    super(host,port);
    _invokers = new  QuerySocketInvoker[26];
    	_invokers[5]= new QuerySocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_getNumberOfParts();
		}
	};
	_invokers[6]= new QuerySocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_getQueryDescription();
		}
	};
	_invokers[7]= new QuerySocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardAnswer();
		}
	};

  }
  
  public QuerySocket2JavaPlainPort() throws de.tum.ascodt.utils.exceptions.ASCoDTException {
    super();
    _invokers = new  QuerySocketInvoker[26];
    	_invokers[5]= new QuerySocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_getNumberOfParts();
		}
	};
	_invokers[6]= new QuerySocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_getQueryDescription();
		}
	};
	_invokers[7]= new QuerySocketInvoker(){
		public void invoke() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
			invoke_forwardAnswer();
		}
	};

  }
  
  @Override
  public void completed(java.nio.channels.AsynchronousSocketChannel result, java.lang.Object attachment) {
    super.completed(result,attachment);
    //createInstance();
    _executor=java.util.concurrent.Executors.newSingleThreadExecutor();
    _executor.execute(this);           
   
  }

  @Override
  public void failed(java.lang.Throwable exc, java.lang.Object attachment) {
     // TODO Auto-generated method stub
     
  }
  
  public void createInstance() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=0;
     sendIntData(methodId);
     _ref=readLongData();
    
  }
  public void destroyInstance() throws de.tum.ascodt.utils.exceptions.ASCoDTException{
     int methodId=1;
     sendIntData(methodId);
     sendLongData(_ref);
          
  }
  
  /**
   * Disconnect a port.
   * 
   * @throw If already not connected to type port.
   * @see Operation with name of any implementing component 
   */
  //public void disconnect(Query  port) throws de.tum.ascodt.utils.exceptions.ASCoDTException {
     //destroyInstance();
  //   super.disconnect(port);
  //}
  
  
  public long getReference(){
    return _ref;
  }  
  
  public void setReference(long ref){
     _ref=ref;
  }
  
  public void close(){
     if(_executor!=null&&!_executor.isShutdown())
          _executor.shutdownNow();
     super.close();
  }
  public void run(){
     int methodId=0;
     try{
          methodId=readIntData(); 
          while(methodId!=-1){
             
              _invokers[methodId].invoke();
              methodId=readIntData();      
          }
         
     }catch(Exception e){
          
          
          de.tum.ascodt.plugin.utils.exceptions.ErrorWriterDevice.getInstance().showError(
            QuerySocket2JavaPlainPort.class.getCanonicalName(),
            "run()",
            "Operation fetching error:"+e.getMessage()
           
          );
     }
     super.close();
  }

  public void invoke_forwardAnswer() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int data_len=readIntData();
double []data=new double[data_len];
readDoubleData(data,data_len);
int distance_len=readIntData();
double []distance=new double[distance_len];
readDoubleData(distance,distance_len);
int indices_len=readIntData();
int []indices=new int[indices_len];
readIntData(indices,indices_len);
int rid=readIntData();

     forwardAnswer(data,distance,indices,rid);
     
  }
  public void forwardAnswer(final double data[],final double distance[],final int indices[],final int rid) {
     _destination.forwardAnswer(data,distance,indices,rid);
  }
  

  public void invoke_getQueryDescription() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int offset_len=readIntData();
double []offset=new double[offset_len];
readDoubleData(offset,offset_len);
int size_len=readIntData();
double []size=new double[size_len];
readDoubleData(size,size_len);
int resolution_len=readIntData();
int []resolution=new int[resolution_len];
readIntData(resolution,resolution_len);
int mids_len=readIntData();
int []mids=new int[mids_len];
readIntData(mids,mids_len);

     getQueryDescription(offset,size,resolution,mids);
     sendIntData(offset.length);
sendDoubleData(offset);
sendIntData(size.length);
sendDoubleData(size);
sendIntData(resolution.length);
sendIntData(resolution);
sendIntData(mids.length);
sendIntData(mids);

  }
  public void getQueryDescription(double offset[],double size[],int resolution[],int mids[]) {
     _destination.getQueryDescription(offset,size,resolution,mids);
  }
  

  public void invoke_getNumberOfParts() throws 
         de.tum.ascodt.utils.exceptions.ASCoDTException{
     int [] parts= new int[1];
readIntData(parts,1);

     getNumberOfParts(parts);
     sendIntData(parts);

  }
  public void getNumberOfParts(int parts[]) {
     _destination.getNumberOfParts(parts);
  }
  


}
 


