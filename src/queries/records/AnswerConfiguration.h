#ifndef _QUERIES_RECORDS_ANSWERCONFIGURATION_H
#define _QUERIES_RECORDS_ANSWERCONFIGURATION_H

#include "tarch/compiler/CompilerSpecificSettings.h"
#include "peano/utils/PeanoOptimisations.h"
#ifdef Parallel
	#include "tarch/parallel/Node.h"
#endif
#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <complex>
#include <string>
#include <iostream>

namespace queries {
   namespace records {
      class AnswerConfiguration;
      class AnswerConfigurationPacked;
   }
}

/**
 * @author This class is generated by DaStGen
 * 		   DataStructureGenerator (DaStGen)
 * 		   2007-2009 Wolfgang Eckhardt
 * 		   2012      Tobias Weinzierl
 *
 * 		   build date: 29-11-2012 08:46
 *
 * @date   02/04/2013 11:43
 */
class queries::records::AnswerConfiguration { 
   
   public:
      
      typedef queries::records::AnswerConfigurationPacked Packed;
      
      struct PersistentRecords {
         int _qid;
         int _scopeid;
         int _card;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const int& qid, const int& scopeid, const int& card);
         
         /**
          * Generated
          */
          int getQid() const ;
         
         /**
          * Generated
          */
          void setQid(const int& qid) ;
         
         /**
          * Generated
          */
          int getScopeid() const ;
         
         /**
          * Generated
          */
          void setScopeid(const int& scopeid) ;
         
         /**
          * Generated
          */
          int getCard() const ;
         
         /**
          * Generated
          */
          void setCard(const int& card) ;
         
         
      };
      
   private: 
      PersistentRecords _persistentRecords;
      
   public:
      /**
       * Generated
       */
      AnswerConfiguration();
      
      /**
       * Generated
       */
      AnswerConfiguration(const PersistentRecords& persistentRecords);
      
      /**
       * Generated
       */
      AnswerConfiguration(const int& qid, const int& scopeid, const int& card);
      
      /**
       * Generated
       */
      virtual ~AnswerConfiguration();
      
      /**
       * Generated
       */
       int getQid() const ;
      
      /**
       * Generated
       */
       void setQid(const int& qid) ;
      
      /**
       * Generated
       */
       int getScopeid() const ;
      
      /**
       * Generated
       */
       void setScopeid(const int& scopeid) ;
      
      /**
       * Generated
       */
       int getCard() const ;
      
      /**
       * Generated
       */
       void setCard(const int& card) ;
      
      /**
       * Generated
       */
      std::string toString() const;
      
      /**
       * Generated
       */
      void toString(std::ostream& out) const;
      
      
      PersistentRecords getPersistentRecords() const;
      /**
       * Generated
       */
      AnswerConfigurationPacked convert() const;
      
      
   #ifdef Parallel
      protected:
         static tarch::logging::Log _log;
         
         int _senderRank;
         
      public:
         
         /**
          * Global that represents the mpi datatype.
          * There are two variants: Datatype identifies only those attributes marked with
          * parallelise. FullDatatype instead identifies the whole record with all fields.
          */
         static MPI_Datatype Datatype;
         static MPI_Datatype FullDatatype;
         
         /**
          * Initializes the data type for the mpi operations. Has to be called
          * before the very first send or receive operation is called.
          */
         static void initDatatype();
         
         static void shutdownDatatype();
         
         void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
         
         void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
         
         static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
         
         int getSenderRank() const;
         
   #endif
      
   };
   
   /**
    * @author This class is generated by DaStGen
    * 		   DataStructureGenerator (DaStGen)
    * 		   2007-2009 Wolfgang Eckhardt
    * 		   2012      Tobias Weinzierl
    *
    * 		   build date: 29-11-2012 08:46
    *
    * @date   02/04/2013 11:43
    */
   class queries::records::AnswerConfigurationPacked { 
      
      public:
         
         struct PersistentRecords {
            int _qid;
            int _scopeid;
            int _card;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const int& qid, const int& scopeid, const int& card);
            
            /**
             * Generated
             */
             int getQid() const ;
            
            /**
             * Generated
             */
             void setQid(const int& qid) ;
            
            /**
             * Generated
             */
             int getScopeid() const ;
            
            /**
             * Generated
             */
             void setScopeid(const int& scopeid) ;
            
            /**
             * Generated
             */
             int getCard() const ;
            
            /**
             * Generated
             */
             void setCard(const int& card) ;
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         AnswerConfigurationPacked();
         
         /**
          * Generated
          */
         AnswerConfigurationPacked(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         AnswerConfigurationPacked(const int& qid, const int& scopeid, const int& card);
         
         /**
          * Generated
          */
         virtual ~AnswerConfigurationPacked();
         
         /**
          * Generated
          */
          int getQid() const ;
         
         /**
          * Generated
          */
          void setQid(const int& qid) ;
         
         /**
          * Generated
          */
          int getScopeid() const ;
         
         /**
          * Generated
          */
          void setScopeid(const int& scopeid) ;
         
         /**
          * Generated
          */
          int getCard() const ;
         
         /**
          * Generated
          */
          void setCard(const int& card) ;
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         AnswerConfiguration convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            int getSenderRank() const;
            
      #endif
         
      };
      
      #endif
      
