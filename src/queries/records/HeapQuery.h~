#ifndef _QUERIES_RECORDS_HEAPQUERY_H
#define _QUERIES_RECORDS_HEAPQUERY_H

#include <bitset>
#include <sstream>
#include <vector>
#include <complex>
#include <string>
#include <iostream>

namespace queries {
   namespace records {
      class HeapQuery;
      class HeapQueryPacked;
   }
}

/**
 * @author This class is generated by DaStGen
 * 		   DataStructureGenerator (DaStGen)
 * 		   2007-2009 Wolfgang Eckhardt
 * 		   2012      Tobias Weinzierl
 *
 * 		   build date: 20-02-2013 11:21
 *
 * @date   26/04/2013 14:28
 */
class queries::records::HeapQuery { 
   
   public:
      
      typedef queries::records::HeapQueryPacked Packed;
      
      struct PersistentRecords {
         std::vector<double> _offset;
         std::vector<double> _size;
         std::vector<int> _dimenions;
         int _queriyId;
         int _mId;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const std::vector<double>& offset, const std::vector<double>& size, const std::vector<int>& dimenions, const int& queriyId, const int& mId);
         
          std::vector<double> getOffset() const ;
         
          void setOffset(const std::vector<double>& offset) ;
         
          std::vector<double> getSize() const ;
         
          void setSize(const std::vector<double>& size) ;
         
          std::vector<int> getDimenions() const ;
         
          void setDimenions(const std::vector<int>& dimenions) ;
         
         /**
          * Generated
          */
          int getQueriyId() const ;
         
         /**
          * Generated
          */
          void setQueriyId(const int& queriyId) ;
         
         /**
          * Generated
          */
          int getMId() const ;
         
         /**
          * Generated
          */
          void setMId(const int& mId) ;
         
         
      };
      
   private: 
      PersistentRecords _persistentRecords;
      
   public:
      /**
       * Generated
       */
      HeapQuery();
      
      /**
       * Generated
       */
      HeapQuery(const PersistentRecords& persistentRecords);
      
      /**
       * Generated
       */
      HeapQuery(const std::vector<double>& offset, const std::vector<double>& size, const std::vector<int>& dimenions, const int& queriyId, const int& mId);
      
      /**
       * Generated
       */
      virtual ~HeapQuery();
      
       std::vector<double> getOffset() const ;
      
       void setOffset(const std::vector<double>& offset) ;
      
       double getOffset(int elementIndex) const ;
      
       void setOffset(int elementIndex, const double& offset) ;
      
       std::vector<double> getSize() const ;
      
       void setSize(const std::vector<double>& size) ;
      
       double getSize(int elementIndex) const ;
      
       void setSize(int elementIndex, const double& size) ;
      
       std::vector<int> getDimenions() const ;
      
       void setDimenions(const std::vector<int>& dimenions) ;
      
       int getDimenions(int elementIndex) const ;
      
       void setDimenions(int elementIndex, const int& dimenions) ;
      
      /**
       * Generated
       */
       int getQueriyId() const ;
      
      /**
       * Generated
       */
       void setQueriyId(const int& queriyId) ;
      
      /**
       * Generated
       */
       int getMId() const ;
      
      /**
       * Generated
       */
       void setMId(const int& mId) ;
      
      /**
       * Generated
       */
      std::string toString() const;
      
      /**
       * Generated
       */
      void toString(std::ostream& out) const;
      
      
      PersistentRecords getPersistentRecords() const;
      /**
       * Generated
       */
      HeapQueryPacked convert() const;
      
      
   #ifdef Parallel
      protected:
         static tarch::logging::Log _log;
         
      public:
         
         /**
          * Global that represents the mpi datatype.
          * There are two variants: Datatype identifies only those attributes marked with
          * parallelise. FullDatatype instead identifies the whole record with all fields.
          */
         static MPI_Datatype Datatype;
         static MPI_Datatype FullDatatype;
         
         /**
          * Initializes the data type for the mpi operations. Has to be called
          * before the very first send or receive operation is called.
          */
         static void initDatatype();
         
         static void shutdownDatatype();
         
         void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
         
         void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
         
         static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
         
         #endif
            
         };
         
         /**
          * @author This class is generated by DaStGen
          * 		   DataStructureGenerator (DaStGen)
          * 		   2007-2009 Wolfgang Eckhardt
          * 		   2012      Tobias Weinzierl
          *
          * 		   build date: 20-02-2013 11:21
          *
          * @date   26/04/2013 14:28
          */
         class queries::records::HeapQueryPacked { 
            
            public:
               
               struct PersistentRecords {
                  std::vector<double> _offset;
                  std::vector<double> _size;
                  std::vector<int> _dimenions;
                  int _queriyId;
                  int _mId;
                  /**
                   * Generated
                   */
                  PersistentRecords();
                  
                  /**
                   * Generated
                   */
                  PersistentRecords(const std::vector<double>& offset, const std::vector<double>& size, const std::vector<int>& dimenions, const int& queriyId, const int& mId);
                  
                   std::vector<double> getOffset() const ;
                  
                   void setOffset(const std::vector<double>& offset) ;
                  
                   std::vector<double> getSize() const ;
                  
                   void setSize(const std::vector<double>& size) ;
                  
                   std::vector<int> getDimenions() const ;
                  
                   void setDimenions(const std::vector<int>& dimenions) ;
                  
                  /**
                   * Generated
                   */
                   int getQueriyId() const ;
                  
                  /**
                   * Generated
                   */
                   void setQueriyId(const int& queriyId) ;
                  
                  /**
                   * Generated
                   */
                   int getMId() const ;
                  
                  /**
                   * Generated
                   */
                   void setMId(const int& mId) ;
                  
                  
               };
               
            private: 
               PersistentRecords _persistentRecords;
               
            public:
               /**
                * Generated
                */
               HeapQueryPacked();
               
               /**
                * Generated
                */
               HeapQueryPacked(const PersistentRecords& persistentRecords);
               
               /**
                * Generated
                */
               HeapQueryPacked(const std::vector<double>& offset, const std::vector<double>& size, const std::vector<int>& dimenions, const int& queriyId, const int& mId);
               
               /**
                * Generated
                */
               virtual ~HeapQueryPacked();
               
                std::vector<double> getOffset() const ;
               
                void setOffset(const std::vector<double>& offset) ;
               
                double getOffset(int elementIndex) const ;
               
                void setOffset(int elementIndex, const double& offset) ;
               
                std::vector<double> getSize() const ;
               
                void setSize(const std::vector<double>& size) ;
               
                double getSize(int elementIndex) const ;
               
                void setSize(int elementIndex, const double& size) ;
               
                std::vector<int> getDimenions() const ;
               
                void setDimenions(const std::vector<int>& dimenions) ;
               
                int getDimenions(int elementIndex) const ;
               
                void setDimenions(int elementIndex, const int& dimenions) ;
               
               /**
                * Generated
                */
                int getQueriyId() const ;
               
               /**
                * Generated
                */
                void setQueriyId(const int& queriyId) ;
               
               /**
                * Generated
                */
                int getMId() const ;
               
               /**
                * Generated
                */
                void setMId(const int& mId) ;
               
               /**
                * Generated
                */
               std::string toString() const;
               
               /**
                * Generated
                */
               void toString(std::ostream& out) const;
               
               
               PersistentRecords getPersistentRecords() const;
               /**
                * Generated
                */
               HeapQuery convert() const;
               
               
            #ifdef Parallel
               protected:
                  static tarch::logging::Log _log;
                  
               public:
                  
                  /**
                   * Global that represents the mpi datatype.
                   * There are two variants: Datatype identifies only those attributes marked with
                   * parallelise. FullDatatype instead identifies the whole record with all fields.
                   */
                  static MPI_Datatype Datatype;
                  static MPI_Datatype FullDatatype;
                  
                  /**
                   * Initializes the data type for the mpi operations. Has to be called
                   * before the very first send or receive operation is called.
                   */
                  static void initDatatype();
                  
                  static void shutdownDatatype();
                  
                  void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                  
                  void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                  
                  static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                  
                  #endif
                     
                  };
                  
                  #endif
                  
